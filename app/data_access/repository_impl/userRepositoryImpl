const { User, UserRole } = require('../../data_access/entities');
const { NotFoundError, ValidationError } = require('../exceptions');
const UserRepository = require('../repository/userRepository');

class UserRepositoryImpl extends UserRepository {
  async createUser(user) {
    try {
      const createdUser = await User.create(user);
      return createdUser;
    } catch (error) {
      if (error.name === 'SequelizeUniqueConstraintError') {
        throw new ValidationError('Email already exists.');
      }
      throw error;
    }
  }

  async getUserById(userId) {
    const user = await User.findByPk(userId, {
      include: [{ model: UserRole, attributes: [] }],
      attributes: { exclude: ['password'] },
    });

    if (!user) {
      throw new NotFoundError('User not found.');
    }

    return user;
  }

  async updateUser(userId, updates) {
    const user = await this.getUserById(userId);
    await user.update(updates);
    return user;
  }

  async deleteUser(userId) {
    const user = await this.getUserById(userId);
    await user.destroy();
  }

  async assignUserRole(userId, roleId) {
    const user = await this.getUserById(userId);
    await user.addRole(roleId);
  }

  async removeUserRole(userId, roleId) {
    const user = await this.getUserById(userId);
    await user.removeRole(roleId);
  }

  async findByEmail(email) {
    const user = await User.findOne({ where: { email } });
    return user;
  }

  async findAll() {
    const users = await User.findAll({
      include: [{ model: UserRole, attributes: [] }],
      attributes: { exclude: ['password'] },
    });
    return users;
  }
}

module.exports = new UserRepositoryImpl();
